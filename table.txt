import os
import sqlite3
import json

def create_sample_json(file_path):
    """Creates a sample JSON file if it doesn't exist."""
    if not os.path.exists(file_path):
        print(f"File '{file_path}' not found. Creating a sample file...")
        sample_data = [
            {"first_name": "Alice", "last_name": "Smith", "age": 25, "salary": 50000, "location": "New York"},
            {"first_name": "Bob", "last_name": "Brown", "age": 0, "salary": None, "location": "San Francisco"},
            {"first_name": "Charlie", "last_name": "Johnson", "age": 30, "salary": 60000, "location": None}
        ]
        with open(file_path, 'w') as file:
            json.dump(sample_data, file, indent=4)

def read_json_file(file_path):
    """Reads the JSON file and returns the data."""
    try:
        with open(file_path, 'r') as file:
            data = json.load(file)
        return data
    except FileNotFoundError:
        print(f"Error: File '{file_path}' not found.")
        return None
    except json.JSONDecodeError:
        print(f"Error: File '{file_path}' contains invalid JSON.")
        return None

def create_database_and_table(db_name):
    """Creates the database and employees table if they do not exist."""
    conn = sqlite3.connect(db_name)
    cursor = conn.cursor()
    
    # Create the employees table if it doesn't exist
    cursor.execute("""
        CREATE TABLE IF NOT EXISTS employees (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            first_name TEXT NOT NULL,
            last_name TEXT NOT NULL,
            age INTEGER,
            salary INTEGER,
            location TEXT,
            UNIQUE(first_name, last_name, age)
        )
    """)
    conn.commit()
    return conn

def insert_employee_data(conn, data):
    """Inserts employee data into the database."""
    cursor = conn.cursor()
    for record in data:
        # Replace null or 0 values with None for SQLite compatibility
        record = {key: (None if value in [0, None] else value) for key, value in record.items()}
        try:
            cursor.execute("""
                INSERT OR IGNORE INTO employees (first_name, last_name, age, salary, location)
                VALUES (:first_name, :last_name, :age, :salary, :location)
            """, record)
        except sqlite3.DatabaseError as e:
            print(f"Database error: {e}")
    conn.commit()

def print_table_contents(conn):
    """Prints all records from the employees table."""
    cursor = conn.cursor()
    cursor.execute("SELECT * FROM employees")
    rows = cursor.fetchall()
    print("Employees table contents:")
    for row in rows:
        print(row)

def main():
    # Input JSON file and database name
    json_file = "employees.json"
    db_name = "employees.db"

    # Step 1: Create sample JSON file if it doesn't exist
    create_sample_json(json_file)

    # Step 2: Read data from the JSON file
    data = read_json_file(json_file)
    if data is None:
        return

    # Step 3: Create database and table
    conn = create_database_and_table(db_name)

    # Step 4: Insert data into the database
    insert_employee_data(conn, data)

    # Step 5: Print table contents
    print_table_contents(conn)

    # Close the database connection
    conn.close()

if __name__ == "__main__":
    main()
